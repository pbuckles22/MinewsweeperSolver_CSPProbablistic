# Minesweeper CSP Probabilistic Solver Project Rules

## Project Context
This is a clean, focused implementation of Constraint Satisfaction Problem (CSP) and probabilistic approaches for solving Minesweeper puzzles. The project provides systematic solving algorithms with comprehensive testing and 95% code coverage.

## Key Design Decisions
- **CSP Solving**: Constraint satisfaction problem solving for deterministic scenarios
- **Probabilistic Approach**: Advanced probability calculations for uncertain situations
- **Board Sizes**: All use (height, width) format throughout codebase
- **Environment**: Clean Minesweeper environment without RL complexity
- **Cross-Platform Support**: Platform-specific scripts in `scripts/windows/`, `scripts/linux/`, `scripts/mac/`
- **Comprehensive Testing**: 95% code coverage with 739 tests

## Cross-Platform Test Compatibility
- **Test Flexibility**: Script tests adapt to different platforms (Mac/Windows/Linux)
- **PowerShell Handling**: Tests check for PowerShell availability before using it
- **Script Validation**: Content-based validation when platform-specific tools unavailable
- **Permission Handling**: Different permission requirements per platform (executable vs readable)
- **Output Handling**: Accepts various output methods (echo, write-host, python, source)
- **Error Handling**: Flexible error handling validation for simple and complex scripts

## Critical Learning Insights
- **CSP Effectiveness**: Constraint satisfaction solves most deterministic scenarios efficiently
- **Probabilistic Necessity**: Some boards require probabilistic approaches for optimal solving
- **Performance**: CSP solving is extremely fast for most configurations
- **Testing Importance**: Comprehensive testing prevents regressions and ensures reliability
- **Coverage Quality**: High test coverage correlates with code quality and maintainability
- **Algorithm Efficiency**: Optimized constraint propagation algorithms for real-time solving

## Important Files
- `src/core/minesweeper_env.py` - Clean Minesweeper environment (95% coverage)
- `src/core/csp_agent.py` - CSP solver implementation (97% coverage)
- `src/core/csp_solver.py` - Core constraint satisfaction logic (90% coverage)
- `src/core/probabilistic_guesser.py` - Probabilistic approach (99% coverage)
- `src/core/constants.py` - Game constants and configuration (100% coverage)
- `tests/` - 739 comprehensive tests (unit: 537, integration: 78, functional: 112, scripts: 12)
- `scripts/mac/` - Mac-specific installation and testing scripts

## Current Test Status (Latest Session)
- **Total Tests**: 739 tests in the suite
- **Unit Tests**: 537 passed (100%)
- **Integration Tests**: 78 passed (100%)
- **Functional Tests**: 112 passed (100%)
- **Script Tests**: 12 passed (100%)
- **Overall Coverage**: 95% code coverage
- **Coverage by Component**:
  - minesweeper_env.py: 95% coverage (34 missing lines)
  - csp_agent.py: 97% coverage (3 missing lines)
  - csp_solver.py: 90% coverage (14 missing lines)
  - probabilistic_guesser.py: 99% coverage (1 missing line)
  - constants.py: 100% coverage

## Recent CSP Solver Success
- **CSP Agent**: Successfully implemented with constraint propagation and pattern recognition
- **Probabilistic Guesser**: Advanced probability calculations for uncertain scenarios
- **Performance**: Fast solving times across various board sizes
- **Environment**: Clean implementation without RL complexity
- **Testing**: Comprehensive test suite with high coverage
- **Cross-Platform**: Full compatibility across Windows, macOS, and Linux

## Current Project Status
- **Core Functionality**: All CSP and probabilistic solving working correctly
- **Test Coverage**: Excellent coverage with only edge cases remaining
- **Documentation**: Comprehensive documentation including test.md and README.md
- **Performance**: Optimized algorithms for efficient solving
- **Architecture**: Clean, maintainable codebase focused on solving algorithms

## When Helping
- Use (height, width) format for board dimensions
- Check CONTEXT.md for detailed project information
- Run tests to verify changes work correctly: `python -m pytest`
- Check coverage after changes: `python -m pytest --cov=src --cov-report=term-missing`
- Focus on CSP and probabilistic improvements, not RL components
- Ensure cross-platform compatibility when modifying tests or scripts
- Maintain 85%+ code coverage for all new code
- Follow test-driven development practices
- Update documentation when making significant changes

## Testing Requirements
- **Minimum Coverage**: 85% for all new code
- **Target Coverage**: 95% for core components
- **Test Categories**: Unit, integration, functional, and script tests
- **Test Maintenance**: Update tests when changing core functionality
- **Coverage Reports**: Generate coverage reports for all changes

## Next Priorities
1. **Performance Optimization**: Further speed improvements for complex boards
2. **Advanced CSP**: Enhanced constraint propagation algorithms
3. **Visualization Tools**: Real-time solving visualization
4. **Machine Learning Integration**: Pattern recognition for complex scenarios
5. **Multi-threading**: Parallel solving for complex boards
6. **Documentation**: Complete API documentation and user guides
7. **Web Interface**: Browser-based game interface
8. **Mobile Support**: iOS and Android applications

## Development Workflow
1. **Test-Driven Development**: Write tests first, then implement features
2. **Coverage Monitoring**: Maintain 85%+ code coverage
3. **Performance Monitoring**: Always benchmark new algorithms
4. **Cross-Platform Testing**: Ensure compatibility across all platforms
5. **Documentation Updates**: Keep documentation current with code changes
6. **Continuous Integration**: Automated testing and coverage reporting

## Code Standards
- Follow PEP 8 style guidelines
- Add comprehensive tests for new features
- Maintain 85%+ code coverage
- Update documentation for API changes
- Use type hints where appropriate
- Write clear, maintainable code

## Missing Coverage Areas
The remaining uncovered lines are primarily in:
- Complex error handling paths
- Pygame rendering (when pygame is not available)
- Very specific edge cases
- Platform-specific code paths

## Performance Benchmarks
- **CSP Solver**: 4x4 boards (~0.001s), 9x9 boards (~0.01s), 16x16 boards (~0.1s)
- **Probabilistic Approach**: 85-95% success rate on uncertain scenarios
- **Test Performance**: Full test suite runs in ~16 seconds
- **Memory Usage**: Efficient data structures for large game states 